import streamlit as st
import joblib
import os
import numpy as np
import pandas as pd

# C·∫•u h√¨nh ti√™u ƒë·ªÅ tab v√† icon
st.set_page_config(
    page_title="App D·ª± ƒëo√°n Churn - Telco",
    page_icon="D:\\DA\\T·ª± h·ªçc\\Customer Churn Prediction\\public\\img\\Logo.png",
    layout="centered"
)

st.title("·ª®ng d·ª•ng d·ª± b√°o kh√°ch h√†ng r·ªùi b·ªè c·ªßa Telco")
st.markdown("<h2 style='text-align: center; font-size:20px;'><b>Nh·∫≠p th√¥ng tin kh√°ch h√†ng ƒë·ªÉ d·ª± ƒëo√°n h·ªç c√≥ r·ªùi b·ªè d·ªãch v·ª• hay kh√¥ng</b></h2><br>", unsafe_allow_html=True)

# Load m√¥ h√¨nh, scaler v√† danh s√°ch c·ªôt ƒë√£ l∆∞u
# X√°c ƒë·ªãnh th∆∞ m·ª•c g·ªëc c·ªßa project
BASE_DIR = os.path.dirname(os.path.abspath(__file__))      # ‚Ä¶/pages
PROJECT_ROOT = os.path.abspath(os.path.join(BASE_DIR, ".."))  # project root

# Build ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi ƒë·∫øn model v√† feature_names
model_path = os.path.join(PROJECT_ROOT, "Model", "Churn_Model.pkl")
feature_names_path = os.path.join(PROJECT_ROOT, "Model", "Feature_Names.pkl")

# Load ch√∫ng
model = joblib.load(model_path)
feature_names = joblib.load(feature_names_path)

# ‚Äî‚Äî‚Äî ƒê·ªãnh nghƒ©a callbacks ƒë·ªÉ ƒë·∫©y gi√° tr·ªã v√†o session_state ‚Äî‚Äî‚Äî
def on_internet_change():
    if st.session_state.InternetService == "No":
        # B·∫Øt bu·ªôc PhoneService = Yes
        st.session_state.PhoneService = "Yes"
        # C√°c d·ªãch v·ª• Internet ph·ª• thu·ªôc
        for field in [
            "OnlineBackup", "StreamingTV", "StreamingMovies",
            "DeviceProtection", "TechSupport", "OnlineSecurity"
        ]:
            st.session_state[field] = "No internet service"

def on_phone_change():
    if st.session_state.PhoneService == "No":
        st.session_state.MultipleLines = "No phone service"
        st.session_state.InternetService = "DSL" 

# Kh·ªüi t·∫°o session_state keys v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu ch∆∞a c√≥
defaults = {
    "PhoneService": "Yes",
    "MultipleLines": "Yes",
    "InternetService": "DSL",
    "OnlineSecurity": "Yes",
    "OnlineBackup": "Yes",
    "DeviceProtection": "Yes",
    "TechSupport": "Yes",
    "StreamingTV": "Yes",
    "StreamingMovies": "Yes",
}
for key, val in defaults.items():
    if key not in st.session_state:
        st.session_state[key] = val

# T·∫°o b·ªë c·ª•c 3 c·ªôt
col1, col2, col3 = st.columns(3)

with col1:
    st.markdown("<h3 style='text-align: center; font-size:17px;'><b>Nh√¢n kh·∫©u h·ªçc</b></h3>", unsafe_allow_html=True)
    gender = st.selectbox("Gi·ªõi t√≠nh", ["Male", "Female"])
    SeniorCitizen = st.selectbox("Kh√°ch h√†ng cao tu·ªïi", ["No", "Yes"])
    Partner = st.selectbox("C√≥ ng∆∞·ªùi th√¢n", ["No", "Yes"])
    Dependents = st.selectbox("C√≥ ng∆∞·ªùi ph·ª• thu·ªôc", ["No", "Yes"])
    
with col2:
    st.markdown("<h3 style='text-align: center; font-size:17px;'><b>Th√¥ng tin d·ªãch v·ª•</b></h3>", unsafe_allow_html=True)
    InternetService = st.selectbox("Lo·∫°i Internet", ["DSL", "Fiber optic", "No"], key="InternetService", on_change=on_internet_change)
    PhoneService = st.selectbox("C√≥ d·ªãch v·ª• ƒëi·ªán tho·∫°i", ["No", "Yes"], key="PhoneService", on_change=on_phone_change)
    
    #T·∫°o dynamic options cho MultipleLines
    if InternetService == "No" or InternetService == "Fiber optic" or PhoneService == "Yes":
        ml_options = ["Yes", "No"]            # Khi kh√¥ng c√≥ Internet ch·ªâ c·∫ßn Yes/No
    else:   
        ml_options = ["Yes", "No", "No phone service"]  # B√¨nh th∆∞·ªùng c√≥ 3 l·ª±a ch·ªçn
    MultipleLines = st.selectbox("D·ªãch v·ª• nhi·ªÅu ƒë∆∞·ªùng d√¢y", ml_options, key="MultipleLines")

with col3:
    st.markdown("<h3 style='text-align: center; font-size:17px;'><b>D·ªãch v·ª• li√™n quan Internet</b></h3>", unsafe_allow_html=True)
    OnlineSecurity = st.selectbox("B·∫£o m·∫≠t tr·ª±c tuy·∫øn", ["No", "Yes", "No internet service"], key="OnlineSecurity")
    OnlineBackup = st.selectbox("Sao l∆∞u tr·ª±c tuy·∫øn", ["No", "Yes", "No internet service"], key="OnlineBackup")
    DeviceProtection = st.selectbox("B·∫£o v·ªá thi·∫øt b·ªã", ["No", "Yes", "No internet service"], key="DeviceProtection")
    TechSupport = st.selectbox("H·ªó tr·ª£ k·ªπ thu·∫≠t", ["No", "Yes", "No internet service"], key="TechSupport")
    StreamingMovies = st.selectbox("D·ªãch v·ª• phim tr·ª±c tuy·∫øn", ["No", "Yes", "No internet service"], key="StreamingMovies")
    StreamingTV = st.selectbox("D·ªãch v·ª• TV tr·ª±c tuy·∫øn", ["No", "Yes", "No internet service"], key="StreamingTV")


st.markdown("<h3 style='text-align: center; font-size:17px;'><b>Th√¥ng tin thanh to√°n</b></h3>", unsafe_allow_html=True)
Contract = st.selectbox("Lo·∫°i h·ª£p ƒë·ªìng", ["Month-to-month", "One year", "Two year"])
tenure = st.slider("Tenure (months)", min_value=1, max_value=72, value=0)
PaperlessBilling = st.selectbox("H√≥a ƒë∆°n ƒëi·ªán t·ª≠", ["No", "Yes"])
PaymentMethod = st.selectbox("Ph∆∞∆°ng th·ª©c thanh to√°n", ["Electronic check", "Mailed check", "Bank transfer", "Credit card"])
MonthlyCharges = st.number_input("C∆∞·ªõc ph√≠ h√†ng th√°ng", min_value=0.0, step=10.0)
TotalCharges = st.number_input("C∆∞·ªõc ph√≠ h√†ng nƒÉm", min_value=0.0, step=10.0)


# T·∫°o DataFrame t·ª´ d·ªØ li·ªáu nh·∫≠p
user_input = pd.DataFrame([{
    "gender": gender,
    "SeniorCitizen": SeniorCitizen,
    "Partner": Partner,
    "Dependents": Dependents,
    "tenure": tenure,
    "PhoneService": PhoneService,
    "MultipleLines": MultipleLines,
    "InternetService": InternetService,
    "OnlineSecurity": OnlineSecurity,
    "OnlineBackup": OnlineBackup,
    "DeviceProtection": DeviceProtection,
    "TechSupport": TechSupport,
    "StreamingTV": StreamingTV,
    "StreamingMovies": StreamingMovies,
    "Contract": Contract,
    "PaperlessBilling": PaperlessBilling,
    "PaymentMethod": PaymentMethod,
    "MonthlyCharges": MonthlyCharges,
    "TotalCharges": TotalCharges
}])

st.write("D·ªØ li·ªáu nh·∫≠p:", user_input)

# One-Hot Encoding gi·ªëng nh∆∞ khi train (vd: s·ª≠ d·ª•ng pd.get_dummies() v·ªõi drop_first=True)
user_input_encoded = pd.get_dummies(user_input, drop_first=True)

# ƒê·∫£m b·∫£o d·ªØ li·ªáu c√≥ ƒë·∫ßy ƒë·ªß c√°c c·ªôt nh∆∞ khi train
user_input_encoded = user_input_encoded.reindex(columns=feature_names, fill_value=0)

# D·ª± ƒëo√°n k·∫øt qu·∫£
if st.button("D·ª± ƒëo√°n"):
    missing = []
    if tenure is None or tenure <= 0:
        missing.append("Tenure")
    if MonthlyCharges is None or MonthlyCharges <= 0:
        missing.append("MonthlyCharges")
    if TotalCharges is None or TotalCharges <= 0:
        missing.append("TotalCharges")
    if missing:
        st.warning(f"üëâ **Vui l√≤ng nh·∫≠p ch·ªâ s·ªë cho: {', '.join(missing)}**")
    else:
        # 1. D·ª± ƒëo√°n label
        pred_label = model.predict(user_input_encoded)[0]
    
        # 2. L·∫•y x√°c su·∫•t churn (gi·∫£ s·ª≠ class 1 = churn)
        if hasattr(model, "predict_proba"):
            proba = model.predict_proba(user_input_encoded)[0][1]
        else:
            # N·∫øu model kh√¥ng h·ªó tr·ª£ predict_proba, b·∫°n c√≥ th·ªÉ d√πng decision_function()
            proba = None

        # 3. Hi·ªÉn th·ªã k·∫øt qu·∫£
        if pred_label == 1:
            st.error("üëâ K·∫øt qu·∫£ d·ª± ƒëo√°n: **Kh√°ch h√†ng c√≥ kh·∫£ nƒÉng r·ªùi b·ªè**")
        else:
            st.success("üëâ K·∫øt qu·∫£ d·ª± ƒëo√°n: **Kh√°ch h√†ng c√≥ kh·∫£ nƒÉng ·ªü l·∫°i**")

        # 4. Hi·ªÉn th·ªã x√°c su·∫•t
        if proba is not None:
            pct = round(proba * 100, 2)
            st.write(f"**X√°c su·∫•t churn:** {pct}%")

            # 5. L·ªùi khuy√™n d·ª±a tr√™n m·ª©c ƒë·ªô r·ªßi ro
            if pct > 75:
                st.warning("‚ö†Ô∏è R·ªßi ro r·∫•t cao! C√¢n nh·∫Øc ngay ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i ho·∫∑c ∆∞u ƒë√£i ri√™ng.")
            elif pct > 50:
                st.info("‚ÑπÔ∏è R·ªßi ro trung b√¨nh. B·∫°n c√≥ th·ªÉ li√™n h·ªá chƒÉm s√≥c kh√°ch h√†ng ƒë·ªÉ gi·ªØ ch√¢n.")
            else:
                st.success("‚úÖ R·ªßi ro th·∫•p. Kh√°ch h√†ng c√≥ xu h∆∞·ªõng trung th√†nh.")
        else:
            st.write("Kh√¥ng th·ªÉ t√≠nh x√°c su·∫•t cho m√¥ h√¨nh n√†y.")


