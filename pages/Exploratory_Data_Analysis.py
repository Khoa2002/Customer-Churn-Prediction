import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sb
import plotly.express as px # chart ƒë·ªông
#function
from Data_Function import stacked_plot, stacked_table, get_color_palettes

st.set_page_config(
    page_title="Exploratory Data Analysis",
    page_icon="D:\\DA\\T·ª± h·ªçc\\Customer Churn Prediction\\public\\img\\EDA.png",
    layout="centered"
)

st.title("Kh√°m ph√° & Ph√¢n t√≠ch d·ªØ li·ªáu")

data = pd.read_csv("Dataset/Data_Analysis.csv")
churn_1, churn_2, churn_5, churn_10 = get_color_palettes()

st.markdown("<h1 style='font-size:25px;'><b>üìÑ I. T√¨m hi·ªÉu d·ªØ li·ªáu</b></h1>", unsafe_allow_html=True)
st.dataframe(data.head(5))


st.markdown("<h2 style='font-size:22px;'><b>üîç T√¨m ki·∫øm th√¥ng tin kh√°ch h√†ng (n·∫øu mu·ªën t√¨m kh√°ch h√†ng)</b></h2>", unsafe_allow_html=True)
st.write("Nh·∫≠p **Customer ID** ƒë·ªÉ t√¨m ki·∫øm th√¥ng tin kh√°ch h√†ng trong h·ªá th·ªëng.")
customer_id = st.text_input("Nh·∫≠p m√£ kh√°ch h√†ng (customerID):", "").strip()
if customer_id:
    # L·ªçc d·ªØ li·ªáu ch·ª©a customer_id (kh√¥ng ph√¢n bi·ªát ch·ªØ hoa/th∆∞·ªùng)
    result = data[data["customerID"].astype(str).str.contains(customer_id, case=False, na=False)]
    if not result.empty:
        st.success(f"‚úÖ T√¨m th·∫•y kh√°ch h√†ng: **{customer_id}**")
        st.dataframe(result)
    else:
        st.warning(f"üÜò Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng v·ªõi m√£ **{customer_id}**.")

st.markdown("<h2 style='font-size:25px;'><b>üìà II. Kh√°m ph√° d·ªØ li·ªáu </b></h2>", unsafe_allow_html=True)

# Task 1
st.markdown("<h2 style='font-size:22px;'><b>1. Ph√¢n ph·ªëi c·ªßa c√°c bi·∫øn s·ªë ƒë∆∞·ª£c bi·ªÉu di·ªÖn nh∆∞ th·∫ø n√†o?</b></h2>", unsafe_allow_html=True)
num_cols = ['TotalCharges', 'MonthlyCharges', 'tenure']
col = st.selectbox("Ch·ªçn bi·∫øn s·ªë:", num_cols)
chart_type = st.radio("Ch·ªçn bi·ªÉu ƒë·ªì:", ["Histogram", "Boxplot"], horizontal=True)

# C·∫•u h√¨nh chung layout v√† axes
BASE_LAYOUT = dict(
    template="plotly_white",
    plot_bgcolor="white",
    paper_bgcolor="white",
    font=dict(family="sans-serif", size=14, color="black"),
    margin=dict(l=40, r=40, t=80, b=40)
)

AXIS_CONFIG = dict(
    title_font=dict(family="sans-serif", size=15, color="black"),
    tickfont=dict(family="sans-serif", size=12, color="black"), 
    zeroline=False,
    showgrid=True,
    gridcolor="lightgray",
    automargin=True
)

if chart_type == "Histogram":
    # t√≠nh padding 5%
    mn, mx = data[col].min(), data[col].max()
    pad = (mx - mn) * 0.05

    fig = px.histogram(data, x=col, nbins=30, color_discrete_sequence=["#F21616"])
    fig.update_layout(
        **BASE_LAYOUT,
        title_text=f"Histogram of {col}",
        title_x=0.5,               # cƒÉn gi·ªØa ngang
        title_xanchor='center',    # neo gi·ªØa
        title_font=dict(family="sans-serif", size=20, color="black")
    )
    fig.update_xaxes(title=col, range=[mn - pad, mx + pad], **AXIS_CONFIG)
    fig.update_yaxes(title="", **AXIS_CONFIG)

else:  # Boxplot
    fig = px.box(data, x=col, points="all", color_discrete_sequence=["#FF5152"])
    fig.update_layout(
        **BASE_LAYOUT,
        title_text=f"Boxplot of {col}",
        title_x=0.5,
        title_xanchor='center',
        title_font=dict(family="sans-serif", size=20, color="black")
    )
    fig.update_xaxes(title=col, **AXIS_CONFIG)
    fig.update_yaxes(title="", **AXIS_CONFIG)

st.plotly_chart(fig, use_container_width=True)
st.divider()

# Task 2
st.markdown("<h2 style='font-size:22px;'><b>2. Kh√°ch h√†ng c√≥ tenure th·∫•p (<3 th√°ng) c√≥ churn cao h∆°n r√µ r·ªát kh√¥ng?</b></h2>", unsafe_allow_html=True)
data['Churn_n'] = data['Churn'].map({'No': 0, 'Yes': 1})
data['NewCustomer'] = np.where(data['tenure'] < 3, 'Tenure < 3', 'Tenure ‚â• 3')
churn_rate = (
    data.groupby('NewCustomer')['Churn_n']
      .mean()
      .reset_index()
)
churn_rate['Churn_n'] = churn_rate['Churn_n'] * 100
st.dataframe(churn_rate)
fig, ax = plt.subplots(figsize=(8, 6))
sb.barplot(data=churn_rate, x='NewCustomer', y='Churn_n', palette=churn_2)
st.pyplot(fig)
st.write("Trong 3 th√°ng ƒë·∫ßu ti√™n, t·ª∑ l·ªá r·ªùi cao x·∫•p x·ªâ 60%, trong khi n√≥ gi·∫£m c√≤n 22%, t·ª´ 3 th√°ng v·ªÅ sau")
st.write("ƒêi·ªÅu n√†y d·ªÖ hi·ªÉu b·ªüi ph·∫ßn l·ªõn kh√°ch h√†ng m·ªõi trong v√†i th√°ng ƒë·∫ßu, kh√°ch h√†ng v·∫´n ƒëang t√¨m hi·ªÉu d·ªãch v·ª•, d·ªÖ ƒë√°nh gi√° so s√°nh v√† s·∫µn s√†ng chuy·ªÉn nh√† m·∫°ng n·∫øu ch∆∞a h√†i l√≤ng.")
st.divider()

# Task 3
st.markdown("<h2 style='font-size:22px;'><b>3. C√≥ ph·∫£i kh√°ch h√†ng c√≥ T·ªïng ph√≠ th·∫•p nh∆∞ng th·ªùi h·∫°n s·ª≠ d·ª•ng d√†i c√≥ xu h∆∞·ªõng m·∫•t kh√°ch h√†ng nhi·ªÅu?</b></h2>", unsafe_allow_html=True)
data_check = data.copy()
data_check['Churn'] = data_check['Churn'].map({'No': 0, 'Yes': 1})
# X√°c ƒë·ªãnh ng∆∞·ª°ng (median)
tenure_med = data_check['tenure'].median()
total_med  = data_check['TotalCharges'].median()
# T·∫°o ph√¢n ƒëo·∫°n: HighTenureLowTotal n·∫øu tenure > median & TotalCharges < median
data_check['Segment'] = np.where(
    (data_check['tenure'] > tenure_med) & (data_check['TotalCharges'] < total_med),
    'KH S·ª≠ d·ª•ng l√¢u d√†i v·ªõi chi ph√≠ th·∫•p ',
    'KH c√≤n l·∫°i'
)
# T√≠nh churn rate theo ph√¢n ƒëo·∫°n
churn_rate = data_check.groupby('Segment')['Churn'].mean().rename("ChurnRate").reset_index()
churn_rate['ChurnRate'] = churn_rate['ChurnRate']*100
st.dataframe(churn_rate)
st.write("Ch√∫ng ta c√≥ th·ªÉ th·∫•y r·∫±ng t·ª∑ l·ªá Churn c·ªßa nh·ªØng kh√°ch h√†ng c√≥ T·ªïng ph√≠ th·∫•p nh∆∞ng th·ªùi gian s·ª≠ d·ª•ng d√†i th·∫•p h∆°n nh·ªØng kh√°ch h√†ng c√≤n l·∫°i.")
plt.figure(figsize=(8,6))
fig, ax = plt.subplots(figsize=(8, 6))
sb.scatterplot(
    data=data_check,
    x='tenure',
    y='TotalCharges',
    hue='Churn',
    alpha=0.5,
    palette=churn_2,
    ax=ax
)
st.pyplot(fig)
st.write("Khi quan s√°t bi·ªÉu ƒë·ªì, c√≥ th·ªÉ th·∫•y r·∫±ng h·∫ßu h·∫øt kh√°ch h√†ng churn ƒë·ªÅu ·ªü trong t√¨nh tr·∫°ng c·∫£ TotalCharges v√† Tenure ƒë·ªÅu tƒÉng, v√† kh√¥ng c√≥ kh√°ch h√†ng churn n√†o khi TotalCharges t·ª´ [0,2000] v√† Tenure t·ª´ [50, 70].")  
st.write("  **Do ƒë√≥, tuy√™n b·ªë tr√™n l√† sai**")
st.divider()

# Task 4
st.markdown("<h2 style='font-size:22px;'><b>4. V·ªõi Churn v√† Non-Churn, c√≥ s·ª± kh√°c bi·ªát v·ªÅ s·ªë th·ªùi h·∫°n h·ª£p ƒë·ªìng (tenure) gi·ªØa hai nh√≥m kh√¥ng?</b></h2>", unsafe_allow_html=True)
churn = data[data["Churn"] == 'Yes']  
non_churn = data[data["Churn"] == 'No']      
st.write("- Trung b√¨nh th·ªùi h·∫°n s·ª≠ d·ª•ng cho KH r·ªùi b·ªè:", churn["tenure"].mean())  
st.write("- Trung b√¨nh th·ªùi h·∫°n s·ª≠ d·ª•ng cho KH ·ªü l·∫°i:", non_churn["tenure"].mean())  
st.write("D·ªÖ d√†ng th·∫•y trung b√¨nh, kh√°ch h√†ng Churn c√≥ th·ªùi gian s·ª≠ d·ª•ng ng·∫Øn h∆°n ƒë√°ng k·ªÉ so v·ªõi kh√°ch h√†ng Non-Churn. (trung b√¨nh 20 th√°ng)")  
st.write("Ti·∫øp theo ta s·∫Ω ki·ªÉm ƒë·ªãnh 2 nh√≥m ƒë·ªôc l·∫≠p ")  
code = '''t_stat, p_value = ttest_ind(non_churn["tenure"], churn["tenure"],  equal_var=False)'''
st.code(code, language="python")
st.write("T-statistic: 34.97, P-value: 0.0000")
st.write("V√¨ P-value < 0.05 ‚Üí C√≥ s·ª± kh√°c bi·ªát v·ªÅ s·ªë th√°ng s·ª≠ d·ª•ng gi·ªØa hai nh√≥m.")
st.write("T√≠nh kho·∫£ng tin c·∫≠y 95 cho 2 nh√≥m")
code = '''diff_mean = churn["tenure"].mean() - non_churn["tenure"].mean()  
    std_error = np.sqrt((churn["tenure"].var()/len(churn)) + (non_churn["tenure"].var()/len(non_churn)))     
    z_critical = norm.ppf(1 - (1 - 0.95)/2)     
    ci_lower = diff_mean - z_critical * std_error  
    ci_upper = diff_mean + z_critical * std_error
    '''
st.code(code, language="python")
st.write("Mean difference: -19.67 months - CI 95%: [-20.77 ; -18.57]")
st.divider()

# Task 5
st.markdown("<h2 style='font-size:22px;'><b>5. Li·ªáu kh√°ch h√†ng k√Ω h·ª£p ƒë·ªìng ng·∫Øn h·∫°n (h√†ng th√°ng) c√≥ t·ª∑ l·ªá h·ªßy h·ª£p ƒë·ªìng cao h∆°n so v·ªõi kh√°ch h√†ng k√Ω h·ª£p ƒë·ªìng d√†i h·∫°n kh√¥ng?</b></h2>", unsafe_allow_html=True)
st.dataframe(pd.crosstab(data['Contract'], data['Churn'], dropna=False))
st.dataframe(stacked_table(data, 'Contract', 'Churn'))
fig, ax = plt.subplots(figsize=(8, 6))
stacked_plot(data, 'Contract', 'Churn', ax, colors=churn_2)
st.pyplot(fig)
st.write(
    """
    - T·ª∑ l·ªá ph√¢n chia g·∫ßn 50:50 cho th·∫•y kh√°ch h√†ng h·ª£p ƒë·ªìng ng·∫Øn h·∫°n (Th√°ng-Th√°ng) c√≥ t·ª∑ l·ªá churn cao h∆°n so v·ªõi kh√°ch h√†ng M·ªôt nƒÉm (11% churn) v√† Hai nƒÉm (3% churn)
    - Ngo√†i ra, kh√°ch h√†ng h·ª£p ƒë·ªìng ng·∫Øn h·∫°n c√≥ l∆∞·ª£ng kh√°ch h√†ng l·ªõn h∆°n so v·ªõi kh√°ch h√†ng h·ª£p ƒë·ªìng d√†i h·∫°n do l∆∞·ª£ng kh√°ch h√†ng m·ªõi ƒë·∫øn tr·∫£i nghi·ªám d·ªãch v·ª• ng√†y c√†ng tƒÉng. Do ƒë√≥, c√≥ th·ªÉ hi·ªÉu ƒë∆∞·ª£c r·∫±ng kh√°ch h√†ng c√≥ nhi·ªÅu kh·∫£ nƒÉng r·ªùi ƒëi trong nƒÉm ƒë·∫ßu ti√™n
    """)
st.divider()

# Task 6
st.markdown("<h2 style='font-size:22px;'><b>6. Kh√°ch h√†ng s·ª≠ d·ª•ng h√¨nh th·ª©c thanh to√°n th·ªß c√¥ng (S√©c ƒëi·ªán t·ª≠, S√©c th∆∞) c√≥ kh·∫£ nƒÉng r·ªùi b·ªè d·ªãch v·ª• cao h∆°n so v·ªõi h√¨nh th·ª©c thanh to√°n t·ª± ƒë·ªông (Th·∫ª t√≠n d·ª•ng, Chuy·ªÉn kho·∫£n ng√¢n h√†ng)?</b></h2>", unsafe_allow_html=True)
st.dataframe(pd.crosstab(data['PaymentMethod'], data['Churn'], dropna=False))
fig, ax = plt.subplots(figsize=(8, 6))
sb.barplot(data=data, x='PaymentMethod', y='TotalCharges', palette=churn_1)
st.pyplot(fig)
st.write("C√≥ th·ªÉ th·∫•y r·∫±ng T·ªïng s·ªë l∆∞·ª£ng kh√°ch h√†ng v√† T·ªïng chi ph√≠ v·ªõi Chuy·ªÉn kho·∫£n ng√¢n h√†ng (t·ª± ƒë·ªông) v√† Th·∫ª t√≠n d·ª•ng (t·ª± ƒë·ªông) lu√¥n cao h∆°n S√©c ƒëi·ªán t·ª≠ v√† S√©c g·ª≠i qua th∆∞, nh∆∞ng ƒëi·ªÅu n√†y kh√¥ng kh·∫≥ng ƒë·ªãnh vi·ªác thanh to√°n th·ªß c√¥ng c√≥ kh·∫£ nƒÉng r·ªùi b·ªè d·ªãch v·ª• cao h∆°n (C√≥ th·ªÉ kh√°ch h√†ng nhi·ªÅu d·∫´n ƒë·∫øn t·ªïng chi ph√≠ cao) nh∆∞ng ƒëi·ªÅu n√†y kh·∫≥ng ƒë·ªãnh vi·ªác kh√°ch h√†ng tin t∆∞·ªüng s·ª≠ d·ª•ng d·ªãch v·ª•")
data['Churn_n'] = data['Churn'].map({'No':0, 'Yes':1})
auto_pay   = ['Credit card (automatic)', 'Bank transfer (automatic)']
manual_pay = ['Electronic check', 'Mailed check']
data['PayGroup'] = np.where(
    data['PaymentMethod'].isin(auto_pay),
    'Auto‚ÄëPay',
    'Manual‚ÄëPay'
)
churn_rate = (
    data.groupby('PayGroup')['Churn_n']
      .mean()
      .reset_index()
)
churn_rate['Churn_n'] = (churn_rate['Churn_n'] * 100).round(2)
st.dataframe(churn_rate)
st.write("C√≥ th·ªÉ th·∫•y r·∫±ng T·ªâ l·ªá trung b√¨nh kh√°ch h√†ng r·ªùi b·ªè c·ªßa h√¨nh th·ª©c thanh to√°n th·ªß c√¥ng (S√©c ƒëi·ªán t·ª≠, S√©c th∆∞) cao h∆°n")
st.write("**Do ƒë√≥, tuy√™n b·ªë tr√™n l√† ƒë√∫ng**")
st.divider()

# Task 7
st.markdown("<h2 style='font-size:22px;'><b>7. Kh√°ch h√†ng ƒëƒÉng k√Ω ‚â• 2 d·ªãch v·ª• (ƒêi·ªán tho·∫°i, Internet, Truy·ªÅn h√¨nh) c√≥ t·ª∑ l·ªá r·ªùi b·ªè d·ªãch v·ª• th·∫•p h∆°n so v·ªõi kh√°ch h√†ng ch·ªâ ƒëƒÉng k√Ω 1 d·ªãch v·ª•</b></h2>", unsafe_allow_html=True)
data['HasInternet'] = np.where(data['InternetService'] == 'No', 0, 1)
data['HasTV'] = np.where(data['StreamingTV'] == 'Yes', 1, 0)
data['HasPhone'] = np.where(data['PhoneService'] == 'Yes', 1, 0)
data['Churn_n'] = data['Churn'].map({'No': 0, 'Yes': 1})
# T√≠nh s·ªë d·ªãch v·ª• m·ªói kh√°ch h√†ng ƒëƒÉng k√Ω
data['NumServices'] = data[['HasPhone','HasInternet','HasTV']].sum(axis=1)
# Ph√¢n nh√≥m: Single (1 d·ªãch v·ª•) vs Multi (>=2 d·ªãch v·ª•)
data['BundleGroup'] = np.where(data['NumServices'] >= 2, 'Multi-Service', 'Single-Service')
churn_rate = (
    data.groupby('BundleGroup')['Churn_n']
      .mean()
      .reset_index()
)
churn_rate['Churn_n'] = (churn_rate['Churn_n'] * 100).round(2)
st.dataframe(churn_rate)
st.write("T·ªâ l·ªá r·ªùi b·ªè c·ªßa vi·ªác kh√°ch h√†ng ƒëƒÉng k√Ω ‚â• 2 d·ªãch v·ª• kh√° cao so v·ªõi kh√°ch h√†ng ch·ªâ ƒëƒÉng k√Ω 1 d·ªãch v·ª•.")
code = '''ct = pd.crosstab(data_check['BundleGroup'], data_check['Churn'])
    chi2, p_value, dof, expected = chi2_contingency(ct)
    '''
st.code(code, language="python")
st.write("Chi-squared Statistic = 309.09 - P-value = 0.0000")
st.write("V√¨ P-value < 0.05 ‚Üí C√≥ s·ª± kh√°c bi·ªát v·ªÅ s·ªë th√°ng s·ª≠ d·ª•ng gi·ªØa hai nh√≥m.")
st.divider()

# Task 8
st.markdown("<h2 style='font-size:22px;'><b>8. C√≥ ph·∫£i Kh√°ch h√†ng c√≥ ng∆∞·ªùi ph·ª• thu·ªôc √≠t kh√°ch h√†ng r·ªùi b·ªè h∆°n v√¨ h·ªç c·∫ßn gi·ªØ li√™n l·∫°c?</b></h2>", unsafe_allow_html=True)
churn_rate = (
    data_check
    .groupby('Dependents')['Churn']
    .mean()              # Trung b√¨nh 0/1 = t·ª∑ l·ªá churn
    .reset_index()
)
churn_rate['Churn'] = churn_rate['Churn'] * 100
st.dataframe(churn_rate)
fig, ax = plt.subplots(figsize=(8, 6))
sb.barplot(data=churn_rate, x='Dependents', y='Churn', palette=churn_1)
plt.title("Churn Rate by Dependents")
plt.ylabel("% Churn")
st.pyplot(fig)
st.write("D·ªÖ d√†ng th·∫•y t·ª∑ l·ªá kh√°ch h√†ng r·ªùi b·ªè c·ªßa kh√°ch h√†ng c√≥ ng∆∞·ªùi ph·ª• thu·ªôc b·∫±ng ph√¢n n·ª≠a c·ªßa kh√¥ng c√≥. V√¨ v·∫≠y gi·∫£ ƒë·ªãnh n√†y ƒë√∫ng")
st.divider()
st.info("C·∫£m ∆°n v√¨ ƒë√£ xem üëç")







